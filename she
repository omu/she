#!/usr/bin/env bash

# prelude.sh - Standard prelude

[ -n "${BASH_VERSION:-}"        ] || { echo >&2 'Bash required.';                         exit 1; }
[[ ${BASH_VERSINFO[0]:-} -ge 4 ]] || { echo >&2 'Bash version 4 or higher required.';     exit 1; }
[[ -x /usr/bin/apt-get         ]] || { echo >&2 'Only Debian and derivatives supported.'; exit 1; }

set -Eeuo pipefail; shopt -s nullglob; [[ -z ${TRACE:-} ]] || set -x; unset CDPATH; IFS=$' \t\n'

export LC_ALL=C.UTF-8 LANG=C.UTF-8

# kernel.sh - Core functions

# say: Print messages on standard error
say() {
	local message

	for message; do
		echo -e >&2 "$message"
	done
}

# cry: Print warning messages on standard error
cry() {
	local message

	for message; do
		echo >&2 "W: $message"
	done
}

# die: Print error messages and exit failure
die() {
	local message

	for message; do
		echo >&2 "E: $message"
	done

        exit 1
}

# bug: Report bug and exit failure
bug() {
	local message

	for message; do
		echo >&2 "B: ${BASH_LINENO[0]}: $message"
	done

	exit 127
}

# bye: Print messages and exit successfully
bye() {
	local message

	for message; do
		echo -e >&2 "$message"
	done

	exit 0
}

# hey: Print colored messages
hey() {
	local message=$1
	shift

	echo -e >&2 "\\e[38;5;14m-->\\e[0m\\e[1m $message\\e[0m"

	for message; do
		echo -e >&2 "    $message"
	done
}

# Dump an array variable
hmm() {
	while [[ $# -gt 0 ]]; do
		# shellcheck disable=2178,2155
		local -n hmm_=$1

		echo "${!hmm_}"

		local key
		for key in "${!hmm_[@]}"; do
			printf '  %-16s  %s\n' "${key}" "${hmm_[$key]}"
		done | sort
		echo

		shift
	done
}

bool() {
	local value=${1:-}

	value=${value,,}

	case $value in
	true|t|1|on|yes|y)
		return 0
		;;
	false|f|0|off|no|n|"")
		return 1
		;;
	*)
		bug "Invalid boolean: $value"
	esac
}

available() {
	command -v "$1" &>/dev/null
}

callable() {
	local name=${1?${FUNCNAME[0]}: missing argument}; shift

	[[ $(type -t "$name" || true) == function ]]
}

piped() {
	[[ ! -t 0 ]]
}

interactive() {
	[[ ! -t 1 ]]
}

included() {
	local needle=${1?${FUNCNAME[0]}: missing argument}; shift

	local element
	for element; do
		if [[ $element = "$needle" ]]; then
			return 0
		fi
	done

	return 1
}

# Check timestamp of reference files against given expiry in minutes
expired() {
	local -i expiry=${1?${FUNCNAME[0]}: missing argument}; shift

	[[ $expiry -gt 0 ]] || return 1

	local file
	for file; do
		if [[ -e $file ]] && [[ -z $(find "$file" -mmin +"$expiry" 2>/dev/null) ]]; then
			return 1
		fi
	done

	return 0
}

# Initialize underscore system

# shellcheck disable=2034
.() {
	# Program name
	readonly PROGNAME=${0##*/}

	# Core environment
	if [[ ${EUID:-} -eq 0 ]]; then
		readonly _RUN=${UNDERSCORE_VOLATILE_PREFIX:-/run/_}
		readonly _USR=${UNDERSCORE_PERSISTENT_PREFIX:-/usr/local}
		readonly _ETC=/etc/_:"$_USR"/etc/_:"$_RUN"/etc
	else
		XDG_RUNTIME_DIR=${XDG_RUNTIME_DIR:-/run/"$EUID"}
		XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-"$HOME"/.config}
		XDG_CACHE_HOME=${XDG_CACHE_HOME:-"$HOME"/.cache}

		readonly _RUN=${UNDERSCORE_VOLATILE_PREFIX:-"$XDG_RUNTIME_DIR"/_}
		readonly _USR=${UNDERSCORE_PERSISTENT_PREFIX:-"$HOME"/.local}
		readonly _ETC=/etc/_:"$XDG_CONFIG_HOME"/_:"$_RUN"/etc
	fi

	export PATH="$_RUN"/bin:"$PATH"
	declare -gA _=()

	unset -f "${FUNCNAME[0]}"
}

# init
.

# must.sh - Guard functions

must.e() {
	local arg=${1?${FUNCNAME[0]}: missing argument};       shift
	local message=${1:-"No such file or directory: $arg"}

	[[ -e $arg ]] || die "$message"
}

must.f() {
	local arg=${1?${FUNCNAME[0]}: missing argument}; shift
	local message=${1:-"No such file: $arg"}

	[[ -f $arg ]] || die "$message"
}

must.d() {
	local arg=${1?${FUNCNAME[0]}: missing argument}; shift
	local message=${1:-"No such directory: $arg"}

	[[ -d $arg ]] || die "$message"
}

must.x() {
	local arg=${1?${FUNCNAME[0]}: missing argument}; shift
	local message=${1:-"Not executable: $arg"}

	[[ -x $arg ]] || die "$message"
}

must.r() {
	local arg=${1?${FUNCNAME[0]}: missing argument}; shift
	local message=${1:-"No such file: $arg"}

	[[ -r $arg ]] || die "$message"
}

must.w() {
	local arg=${1?${FUNCNAME[0]}: missing argument}; shift
	local message=${1:-"No such file: $arg"}

	[[ -w $arg ]] || die "$message"
}

must.n() {
	local arg=${1?${FUNCNAME[0]}: missing argument}; shift
	local message=${1:-"Empty value: $arg"}

	[[ -n $arg ]] || die "$message"
}

must.z() {
	local arg=${1?${FUNCNAME[0]}: missing argument}; shift
	local message=${1:-"Empty value: $arg"}

	[[ -z $arg ]] || die "$message"
}

# Command must success
must.success() {
	"$@" || die "Command failed: $*"
}

# Command may fail but must proceed
must.proceed() {
	"$@" || cry "Exit code $? is suppressed: $*"
}

# Condition must be true
must.true() {
	local message=${1?${FUNCNAME[0]}: missing argument}; shift

	"$@" || die "$message"
}

# Condition must be false
must.false() {
	local message=${1?${FUNCNAME[0]}: missing argument}; shift

	"$@" && die "$message"
}

# Program must exist
must.available() {
	local arg=${1?${FUNCNAME[0]}: missing argument}; shift
	local message=${1:-"No program found: $arg"}

	command -v "$arg" &>/dev/null || die "$message"
}

# Function must exist
must.callable() {
	local arg=${1?${FUNCNAME[0]}: missing argument}; shift
	local message=${1:-"No function found: $arg"}

	callable "$arg" || die "$message"
}


# self.sh - Functions related to program itself

# self.version: Print self version
self.version() {
	echo 0.0
}

# self.name: Print self name
self.name() {
	echo she
}

# self.path: Print self path
self.path() {
	local self

	self=${BASH_SOURCE[0]}
	case $self in
	./*) readlink -f "$self" ;;
	/*)  echo "$self" ;;
	*)   readlink -f "$(command -v "$self")" ;;
	esac
}

self.usage() {
	local message

	for message;  do
		echo >&2 "$message"
	done

	echo >&2 "Usage: $(self.path) CMD [ARGS]..."
	exit 1
}

# flag.sh - Flag handling

flag.parse() {
	if [[ ${#_[@]} -gt 1 ]]; then
		flag.parse_strict_ "$@"
	else
		flag.parse_loose_ "$@"
	fi
}

flag.env() {
	local -n flag_env_=${1?${FUNCNAME[0]}: missing argument}; shift

	local key
	for key in "${!_[@]}"; do
		if [[ $key =~ ^[[:alpha:]_][[:alnum:]_]*$ ]]; then
			flag_env_+=("$key='${_[$key]}'")
		fi
	done
}

flag.args() {
	local -n flag_args_=${1?${FUNCNAME[0]}: missing argument}; shift

	local key
	for key in "${!_[@]}"; do
		[[ $key =~ ^[1-9][0-9]+$ ]] || continue
		flag_args_+=("${_[$key]}")
	done
}

flag.vars() {
	local -n flag_vars_=${1?${FUNCNAME[0]}: missing argument}; shift

	local key
	for key in "${!_[@]}"; do
		[[ $key =~ ^[.].+$ ]] || continue
		flag_vars_+=("${_[$key]}")
	done
}

flag.true() {
	bool "${_[-$1]:-}"
}

flag.false() {
	! flag.true "$@"
}

flag.dump() {
	hmm _
}

flag.overlay() {
	local -i i=1

	while [[ $# -gt 0 ]]; do
		local key value

		if [[ $1 =~ ^-*[[:alpha:]_][[:alnum:]_]*= ]]; then
			key=${1%%=*}; value=${1#*=}
			_["$key"]=$value
		elif [[ $1 == '--' ]]; then
			shift
			break
		else
			# shellcheck disable=2154
			_[error]="Non flag or key: $1"
			return 1
		fi

		shift
	done
}

flag.underlay() {
	local -i i=1

	while [[ $# -gt 0 ]]; do
		local key value

		if [[ $1 =~ ^-*[[:alpha:]_][[:alnum:]_]*= ]]; then
			key=${1%%=*}; value=${1#*=}
			[[ -v _[$key] ]] || _["$key"]=$value
		elif [[ $1 == '--' ]]; then
			shift
			break
		else
			_[error]="Non flag or key: $1"
			return 1
		fi

		shift
	done
}

flag.parse_strict_() {
	local -i i=1

	while [[ $# -gt 0 ]]; do
		local key value

		if [[ $1 =~ ^-*[[:alpha:]_][[:alnum:]_]*= ]]; then
			key=${1%%=*}; value=${1#*=}
			if [[ $key =~ ^-.+$ ]] && [[ ! -v _[$key] ]]; then
				_[error]="Unrecognized flag: $key"

				return 1
			fi
		elif [[ $1 == '--' ]]; then
			shift
			break
		else
			key=$((i++)); value=$1
		fi

		_["$key"]=$value

		shift
	done
}

flag.parse_loose_() {
	local -i i=1

	while [[ $# -gt 0 ]]; do
		local key value

		if [[ $1 =~ ^-*[[:alpha:]_][[:alnum:]_]*= ]]; then
			key=${1%%=*}; value=${1#*=}
		elif [[ $1 == '--' ]]; then
			shift
			break
		else
			key=$((i++)); value=$1
		fi

		_["$key"]=$value

		shift
	done
}

# string.sh - String manipulation

string.has_prefix_deleted() {
	local -n string_has_prefix_deleted_=$1
	local prefix=$2

	if [[ $string_has_prefix_deleted_ =~ ^$prefix ]]; then
		string_has_prefix_deleted_=${string_has_prefix_deleted_#$prefix}

		return 0
	fi

	return 1
}

string.delete_prefix() {
	string.has_prefix_deleted "$@" || :
}

string.has_suffix_deleted() {
	local -n string_has_suffix_deleted_=$1
	local suffix=$2

	if [[ $string_has_suffix_deleted_ =~ $suffix$ ]]; then
		string_has_suffix_deleted_=${string_has_suffix_deleted_%$suffix}

		return 0
	fi

	return 1
}

string.delete_suffix() {
	string.has_suffix_deleted "$@" || :
}

# array.sh - Array functions

# Join array with the given separator
array.join() {
	local IFS=${1?${FUNCNAME[0]}: missing argument}; shift

	echo "$*"
}
# Duplicate array
array.dup() {
	local -n array_dup_lhs_=${1?${FUNCNAME[0]}: missing argument}; shift
	local -n array_dup_rhs_=${1?${FUNCNAME[0]}: missing argument}; shift

	local key
	for key in "${!array_dup_rhs_[@]}"; do
		# shellcheck disable=2034
		array_dup_lhs_[$key]=${array_dup_rhs_[$key]}
	done
}

# The element included in the given array
array.included() {
	local -n array_included_=${1?${FUNCNAME[0]}: missing argument}; shift
	local    element=${1?${FUNCNAME[0]}: missing argument};         shift

	included "$element" "${array_included_[@]}"
}

# path.sh - Path management

path.is_volatile() {
	df -t tmpfs "$1" &>/dev/null
}

path.is_equal() {
	[[ $(realpath -m "$1") = $(realpath -m "$2") ]]
}

path.is_inside() {
	local given=${1?${FUNCNAME[0]}: missing argument}; shift
	local path=${1?${FUNCNAME[0]}: missing argument};  shift

	local relative
	relative=$(realpath --relative-to "$given" "$path" 2>/dev/null) || return

	[[ ! $relative =~ ^[.] ]]
}

path.dir() {
	local -n path_dir_=${1?${FUNCNAME[0]}: missing argument}; shift

	path.normalize path_dir_

	case $path_dir_ in
	*/*)
		path_dir_=${path_dir_%/*}
		[[ -n $path_dir_ ]] || path_dir_=/
		;;
	*)
		path_dir_=.
		;;
	esac
}

path.base() {
	local -n path_base_=${1?${FUNCNAME[0]}: missing argument}; shift
	local    ext=${1:-}

	path_base_=${path_base_##*/}
}

path.name() {
	local -n path_name_=${1?${FUNCNAME[0]}: missing argument}; shift
	local    ext=${1:-}

	path_name_=${path_name_##*/}
	path_name_=${path_name_%.*}
}

path.ext() {
	local -n path_ext_=${1?${FUNCNAME[0]}: missing argument}; shift

	path_ext_=${path_ext_##*/}

	case $path_ext_ in
	*.*)
		path_ext_=${path_ext_##*.}
		;;
	*)
		path_ext_=
		;;
	esac
}

path.subext() {
	local -n path_subext_=${1?${FUNCNAME[0]}: missing argument}; shift
	local    ext=${1?${FUNCNAME[0]}: missing argument};          shift

	case $path_subext_ in
	*.*)
		path_subext_=${path_subext_%.*}
		path_subext_=${path_subext_}.${ext}
		;;
	*)
		;;
	esac
}

# shellcheck disable=2034
path.parse() {
	local -n path_parse_=_
	if [[ ${1:-} = -A ]]; then
		shift
		path_parse_=${1?${FUNCNAME[0]}: missing argument}; shift
	fi

	local path=${1?${FUNCNAME[0]}: missing argument}; shift

	local dir=$path base=$path name=$path ext=$path

	path.dir dir
	path.base base
	path.name name
	path.ext ext

	path_parse_[.dir]=$dir
	path_parse_[.base]=$base
	path_parse_[.name]=$name
	path_parse_[.ext]=$ext

	if [[ -n $ext ]]; then
		path_parse_[.dotext]=.$ext
	else
		path_parse_[.dotext]=$ext
	fi
}

path.suffixize() {
	local -n path_suffixize_=${1?${FUNCNAME[0]}: missing argument}; shift
	local    suffix=${1?${FUNCNAME[0]}: missing argument};          shift

	local -A _
	path.parse "$path_suffixize_"

	printf -v path_suffixize_ "%s/%s${suffix}%s" "${_[.dir]:-.}" "${_[.name]}" "${_[.dotext]}"
}

path.normalize() {
	local -n path_normalize_=${1?${FUNCNAME[0]}: missing argument}; shift

	while [[ $path_normalize_ =~ //+ ]]; do
		path_normalize_=${path_normalize_/\/\//\/}
	done
}

# trap.sh - Trap setup

declare -ag _at_exit_funcs_=()

declare -ag _at_exit_files_=()

# Register hooks at exit
at_exit() {
	local arg

	for arg; do
		[[ $(type -t "$arg" || true) == function ]] || bug "Not a function: $arg"
	done

	_at_exit_funcs_=("$@" "${_at_exit_funcs_[@]}")
}

# Register files/directories to clean up at exit
at_exit_files() {
	_at_exit_files_+=("$@")
}

_exit_() {
	local err=$?

	local func
	for func in "${_at_exit_funcs_[@]}"; do
		"$func" || cry "Exit hook failed: $func"
	done

	return "$err"
}

# Prevent using trap
trap() {
	bug 'Using trap is forbidden; please use at_exit to register hooks.'
}

_at_exit_cleanup_() {
	[[ ${#_at_exit_files_[@]} -gt 0 ]] || return 0

	rm -rf -- "${_at_exit_files_[@]}"
}

# shellcheck disable=2120
trap.setup() {
	local -a signals=(EXIT HUP INT QUIT TERM)

	[[ $# -eq 0 ]] || signals=("$@")

	# shellcheck disable=2154,2218
	builtin trap _exit_ "${signals[@]}"

	at_exit _at_exit_cleanup_
}

# temp.sh - Functions involving temporary directories or files

temp.file() {
	# shellcheck disable=2155
	local -n temp_file_=${1?${FUNCNAME[0]}: missing argument}; shift

	local file

	file=$(mktemp -p "${TMPDIR:-/tmp}" "$PROGNAME".XXXXXXXX) || die 'Fatal error: mktemp'
	at_exit_files "$file"

	# shellcheck disable=2034
	temp_file_=$file
}

temp.dir() {
	# shellcheck disable=2155
	local -n temp_dir_=${1?${FUNCNAME[0]}: missing argument}; shift

	local dir
	dir=$(mktemp -p "${TMPDIR:-/tmp}" -d "$PROGNAME".XXXXXXXX) || die 'Fatal error: mktemp'
	at_exit_files "$dir"

	# shellcheck disable=2034
	temp_dir_=$dir
}

# temp.inside: Execute command in temp dir
temp.inside() {
	local temp_dir orig_dir=$PWD
	temp.dir temp_dir

	must.success cd "$temp_dir"
	"$@"
	must.success cd "$orig_dir"

	rm -rf -- "$temp_dir"
}

temp.clean() {
	while [[ $# -gt 0 ]]; do
		local -n temp_clean_=$1; shift

		[[ -z ${!temp_clean_:-} ]] || rm -f -- "${!temp_clean_}"
	done
}

# os.sh - OS related functions

# os.virtual: Which virtualization
os.virtual() {
	systemd-detect-virt
}

# os.distribution: Which distribution
os.distribution() {
	# shellcheck disable=1091
	(unset ID && . /etc/os-release 2>/dev/null && echo "$ID")
}

# os.codename: Which distribution release
os.codename() {
	lsb_release -sc
}

# os.is: Detect OS feature
os.is() {
	local feature=${1?${FUNCNAME[0]}: missing argument}; shift

	local func=os.is._"${feature}"

	must.callable "$func" "Unable to detect: $feature"

	"$func"
}

# is.virtual: Detect given virtualization
# shellcheck disable=2120
os.is._virtual() {
	if [[ $# -gt 0 ]]; then
		[[ "$(os.virtual)" = "$1" ]]
	else
		[[ -z ${CI:-} ]] || return 0
		[[ -z ${PACKER_BUILDER_TYPE:-} ]] || return 0

		systemd-detect-virt -q
	fi
}

# is.debian: Detect Debian or its given release
os.is._debian() {
	if [[ $# -gt 0 ]]; then
		case $1 in
		unstable|testing|sid)
			grep -qwE '(sid|unstable)' /etc/debian_version 2>/dev/null
			;;
		stable)
			! grep -qwE '(sid|unstable)' /etc/debian_version 2>/dev/null
			;;
		*)
			[[ "$(os.codename)" = "$1" ]]
			;;
		esac
	else
		[[ "$(os.distribution)" = 'debian' ]]
	fi
}

# is.ubuntu: Detect Ubuntu or its given release
os.is._ubuntu() {
	if [[ $# -gt 0 ]]; then
		[[ "$(os.codename)" = "$1" ]]
	else
		[[ "$(os.distribution)" = 'ubuntu' ]]
	fi
}

# is.proxmox: Detect Proxmox
os.is._proxmox() {
	available pveversion && uname -a | grep -q -i pve
}

# is.vagrant: Detect Vagrant
os.is._vagrant() {
	# shellcheck disable=2119
	os.is._virtual || return 1

	[[ -d /vagrant ]] || id -u vagrant 2>/dev/null
}

# uel.sh - URL processing

# Parse URL
# shellcheck disable=2034
url.parse() {
	local -n url_parse_=_
	if [[ ${1:-} = -A ]]; then
		shift
		url_parse_=${1?${FUNCNAME[0]}: missing argument}; shift
	fi

	local url=${1?${FUNCNAME[0]}: missing argument}; shift

	# shellcheck disable=1007
	local proto= userinfo= host= port= path= frag=

	if [[ $url =~ ^(/|./|file://) ]]; then
		proto='file';  url=${url#*://}
		tag=${url#*@}; url=${url%@*}
		path=$url

		# shellcheck disable=2209
		url_parse_[.proto]=file
		url_parse_[.path]=$path

		return 0
	fi

	if [[ $url =~ ^.+:// ]]; then
		proto=${url%%://*}; url=${url#*://}
	fi

	if [[ $url =~ ^[^@/]+@[^/:]+ ]]; then
		userinfo=${url%%@*}; url=${url#*@}
	fi

	if [[ $url =~ ^[^:]+:[0-9]+ ]]; then
		host=${url%%:*};      url=${url#$host:}
		port=${url%%[^0-9]*}; url=${url#$port}
	else
		host=${url%%[/:]*};   url=${url#*[/:]}
	fi

	if [[ $url =~ ^: ]]; then
		url=${url#*:}

		if [[ -n $proto ]]; then
			if [[ $proto != ssh ]]; then
				# shellcheck disable=2154
				url_parse_[.error]='protocol mismatch'
				return 1
			fi
		else
			proto=ssh
		fi
	else
		url=${url#/}

		if [[ -n $proto && $proto = ssh ]]; then
			url_parse_[.error]='invalid SSH url'
			return 1
		fi
	fi

	if [[ -z $proto ]]; then
		proto=https
	fi

	if [[ $url =~ [#].*$ ]]; then
		frag=${url#*#}; url=${url%#*}
	fi

	path=$url

	url_parse_[.frag]=$frag
	url_parse_[.host]=$host
	url_parse_[.path]=$path
	url_parse_[.port]=$port
	url_parse_[.proto]=$proto
	url_parse_[.userinfo]=$userinfo
}

url.is() {
	local url=${1?${FUNCNAME[0]}: missing argument};     shift
	local feature=${1?${FUNCNAME[0]}: missing argument}; shift

	if [[ $feature = local ]]; then
		[[ $url =~ ^(/|./|file://) ]]
		return
	fi

	local -A _
	url.parse "$url"

	url.is_ "$feature" "$@"
}

url.is_() {
	local feature=${1?${FUNCNAME[0]}: missing argument};  shift
	local expected=${1?${FUNCNAME[0]}: missing argument}; shift

	[[ ${_[.${feature}]} = "$expected" ]]
}

# https.sh - HTTP functions

# http.get: Get URL
http.get() {
	local url=${1?${FUNCNAME[0]}: missing argument}; shift

	[[ $url =~ ^.*:// ]] || url=https://$url

	curl -fsSL "$url"
}

http.is() {
	local url=${1?${FUNCNAME[0]}: missing argument};  shift
	local code=${1?${FUNCNAME[0]}: missing argument}; shift

	if [[ ${code,,} = ok ]]; then
		code=200
	fi

	local response
	response=$(curl -fsL -w '%{http_code}\n' -o /dev/null "$url" || true)

	[[ $response = "$code" ]]
}

# file.sh - File related operations

# file.install: Install file from URL
file.install() {
	# shellcheck disable=2192
	local -A _=(
		[-group]=
		[-mode]=
		[-owner]=
		[-prefix]=
	)

	flag.parse "$@"

	local url=${_[1]?${FUNCNAME[0]}: missing value}
	local dst=${_[2]:-${url##*/}}

	file.install_ "$url" "$dst"
}

# Copy file/directory to dstination creating all parents if necessary
file.copy() {
	file._do_args_ copy "$@"
}

# Move file/directory to destination creating all parents if necessary
file.move() {
	file._do_args_ move "$@"
}

# Link file/directory to dstination creating all parents if necessary
file.link() {
	file._do_args_ link "$@"
}

file.chogm() {
	# shellcheck disable=2192
	local -A _=(
		[-group]=
		[-mode]=
		[-owner]=
	)

	flag.parse "$@"

	local dst=${_[1]?${FUNCNAME[0]}: missing value}

	file.chogm_ "$dst"
}

file.ln() {
	local src=${1?${FUNCNAME[0]}: missing argument}; shift
	local dst=${1?${FUNCNAME[0]}: missing argument}; shift

	src=$(realpath -m --relative-base "${dst%/*}" "$src")
	must.success ln -sf "$src" "$dst"
}

file.enter() {
	local dir=${1:-}

	[[ -n $dir ]] || return 0

	if [[ -d $dir ]]; then
		must.success cd "$dir"
	else
		dir=${dir%/*}
		[[ -d $dir ]] || die "No path found to enter: $dir"
		must.success cd "$dir"
	fi
}

file.download() {
	local    url=${1?${FUNCNAME[0]}: missing argument};                shift
	local -n file_download_dst_=${1?${FUNCNAME[0]}: missing argument}; shift

	local tempfile

	temp.file tempfile
	must.success http.get "$url" >"$tempfile"

	# shellcheck disable=2034
	file_download_dst_=$tempfile
}

# file.sh - Private functions

file._do_args_() {
	local op=${1?${FUNCNAME[0]}: missing argument}; shift

	# shellcheck disable=2192
	local -A _=(
		[-group]=
		[-mode]=
		[-owner]=
		[-prefix]=
	)

	flag.parse "$@"

	local src=${_[1]?${FUNCNAME[0]}: missing value}
	local dst=${_[2]?${FUNCNAME[0]}: missing value}

	file.do_ "$op" "$src" "$dst"
}

file.do_() {
	local op=${1?${FUNCNAME[0]}: missing argument};  shift
	local src=${1?${FUNCNAME[0]}: missing argument}; shift
	local dst=${1?${FUNCNAME[0]}: missing argument}; shift

	[[ -e $src ]] || die "Source not found: $src"

	file.dst_ dst

	local dstdir
	if string.has_suffix_deleted dst /; then
		dstdir=$dst
	else
		dstdir=$dst
		path.dir dstdir
	fi

	[[ $dstdir = . ]] || must.success mkdir -p "$dstdir"

	case $op in
	copy)
		must.success cp -a "$src" "$dst"
		;;
	move)
		must.success mv -f "$src" "$dst"
		;;
	link)
		file.ln "$src" "$dst"
		;;
	*)
		bug "Unrecognized operation: $op"
		;;
	esac

	file._chogm_ "$dst"
}

file.dst_() {
	local -n file_dst_=${1?${FUNCNAME[0]}: missing argument}; shift

	[[ -z ${_[-prefix]:-} ]] || file_dst_=${_[-prefix]}/$file_dst_
}

file.install_() {
	local url=${1?${FUNCNAME[0]}: missing argument}; shift
	local dst=${1?${FUNCNAME[0]}: missing argument}; shift

	local tempfile=

	if url.is "$url" local; then
		src=$url
	else
		temp.file tempfile
		http.get "$url" >"$tempfile"
		src=$tempfile
	fi

	file.do_ copy "$src" "$dst"

	temp.clean tempfile
}

file._chogm_() {
	local dst=${1?${FUNCNAME[0]}: missing argument}; shift

	[[ -z ${_[-mode]:-}  ]] || must.success chmod "${_[-mode]}"  "$dst"
	[[ -z ${_[-owner]:-} ]] || must.success chown "${_[-owner]}" "$dst"
	[[ -z ${_[-group]:-} ]] || must.success chgrp "${_[-group]}" "$dst"
}

# bin.sh - Executable files

# bin.install: Install program to path
bin.install() {
	# shellcheck disable=2192
	local -A _=(
		[-prefix]="$_USR"/bin
		[-name]=
	)

	flag.parse "$@"

	local url=${_[1]?${FUNCNAME[0]}: missing value}

	# shellcheck disable=1007
	local bin= tempfile= tempdir=

	if [[ $url =~ ^[.]*/ ]]; then
		bin=$url
	else
		file.download tempfile
		bin=$tempfile
	fi

	if is.file compressed "$bin"; then
		zip.unpack "$bin" tempdir
		bin=$tempdir
	fi

	local -a bins
	bin._inspect "$bin" bins

	if [[ ${#bins[@]} -eq 1 ]]; then
		local src=${bins[0]} dst=${_[-name]:-}

		file.install -prefix="${_[-prefix]}" -mode=755 "$src" "$dst"
	elif [[ ${#bins[@]} -gt 1 ]]; then
		[[ -n ${_[-name]:-} ]] || die "Ambiguous usage of name argument: ${_[-name]}"

		local src
		for src in "${bins[@]}"; do
			file.install -prefix="${_[-prefix]}" -mode=755 "$src"
		done
	else
		die "No program found: $url"
	fi

	temp.clean tempfile tempdir
}

# bin.use: Use program
bin.use() {
	bin.install -prefix="$_RUN"/bin "$@"
}

bin._inspect() {
	local bin=${1?${FUNCNAME[0]}: missing argument};             shift
	local -n bin_inspect_=${1?${FUNCNAME[0]}: missing argument}; shift

	if [[ -d $bin ]]; then
		local file
		for file in "$bin"/*; do
			is.file program "$file" || continue
			bin_inspect_+=("$file")
		done
	elif is.file program "$bin"; then
		bin_inspect_+=("$file")
	fi
}

# git.sh - Git functions

git.is_git() {
	local path=${1:-.}

	[[ -d $path/.git ]] && git rev-parse --resolve-git-dir "$path/.git" &>/dev/null
}

git.must_sane() {
	git rev-parse --is-inside-work-tree &>/dev/null || die "Must be inside a git work tree: $PWD"
	git rev-parse --verify HEAD >/dev/null          || die "Unverified git HEAD: $PWD"
}

git.is_clean() {
	git rev-parse --verify HEAD >/dev/null &&
	git update-index -q --ignore-submodules --refresh &&
	git diff-files --quiet --ignore-submodules &&
	git diff-index --cached --quiet --ignore-submodules HEAD --
}

git.must_clean() {
	git.is_clean || die "Must be a clean git work tree: $PWD"
}

git.topdir() {
	local dir

	dir=$(git rev-parse --git-dir) && dir=$(cd "$dir" && pwd)/ && echo "${dir%%/.git/*}"
}

git.top() {
	git.must_sane

	must.success cd "$(git.topdir)"
}

git.default_branch() {
	git.must_sane

	git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@'
}

git.switch() {
	local branch=${1:-}

	[[ -n $branch ]] || branch=$(git.default_branch)

	git checkout --quiet "$branch"
}

git.update() {
	local -A _=(
		[-expiry]=3
	)

	flag.parse "$@"

	if expired "${_[-expiry]}" .git/FETCH_HEAD; then
		git.must_clean
		git pull --quiet origin
	fi
}

git.dst_() {
	file.dst_ "$@"
}

git.exist_() {
	local dst=${1?${FUNCNAME[0]}: missing argument}; shift

	git.dst_ dst

	[[ -d $dst ]]
}

git.enter_() {
	local dst=${1?${FUNCNAME[0]}: missing argument}; shift

	git.dst_ dst

	[[ -d $dst ]] || die "Destination not found: $dst"

	must.success pushd "$dst" >/dev/null

	git.is_git . || die "Not a git repository: $PWD"

	file.enter "${_[.dir]:-}"
}

git.clone_() {
	local url=${1?${FUNCNAME[0]}: missing argument}; shift
	local dst=${1?${FUNCNAME[0]}: missing argument}; shift

	! git.exist_ "$dst" || die "Destination already exist: $dst"

	local -a opt

	[[ -z ${_[-shallow]:-} ]] || opt+=(--depth 1)
	[[ -z ${_[.branch]:-}   ]] || opt+=(--branch "${_[.branch]}")

	_func_() {
		git clone "${opt[@]}" "$url" .
		file.do_ copy . "$dst"
	}

	temp.inside _func_

	unset -f _func_
}

git.update_() {
	local dst=${1?${FUNCNAME[0]}: missing argument}; shift

	git.enter_ "$dst"

	git.switch "${_[.branch]:-}"

	local -i expiry=${_[-expiry]:-3}
	if expired "$expiry" .git/FETCH_HEAD; then
		git.must_clean

		say 'Updating repository...'
		git pull --quiet origin
	fi

	must.success popd >/dev/null
}

# src.sh - Source management

# src.install: Install to a known location
src.install() {
	# shellcheck disable=2192
	local -A _=(
		[-expiry]=
		[-prefix]="$_USR"/src
	)

	flag.parse "$@"

	src.install_
}

# src.use: Install src into the runtime tree
src.use() {
	# shellcheck disable=2192
	local -A _=(
		[-expiry]=
		[-prefix]="$_RUN"/src
		[-shallow]=false
	)

	flag.parse "$@"

	src.install_
}

# enter: Get src from URL and enter to the directory
src.enter() {
	src.use "$@" >/dev/null

	echo "$PWD"
}

# run: Run src from URL
src.run() {
	# shellcheck disable=2192
	local -A _=(
		[-expiry]=-1
		[-prefix]="$_RUN"/src
		[-pwd]=
		[-shallow]=false
		[-test]=false
	)

	flag.parse "$@"

	src.install_

	src.run_ "${_[.dir]}"
	flag.false test || src.test_ "${_[.dir]}"
}

src.managed_() {
	local path=${1?${FUNCNAME[0]}: missing argument}; shift

	git.is_git "$path" && git -C "$path" config underscore.name &>/dev/null
}

src.install_() {
	local url=${_[1]?${FUNCNAME[0]}: missing value}

	url.parse "$url" || die "Error parsing URL: ${_[.error]}: $url"

	src._plan_ || die "Error planning URL: ${_[.error]}: $url"

	local src=${_[1]} dst=${_[2]}

	if src.exist_ "$dst"; then
		src.update_ "$dst"
	else
		src.get_ "$src" "$dst"
	fi

	src.enter_ "$dst"
}

src.run_() {
	local file=${1?${FUNCNAME[0]}: missing argument}; shift

	path.base file

	hey "$file"
	src.exe_ "$file"
}

src.test_() {
	local file=${1?${FUNCNAME[0]}: missing argument}; shift

	local test_file=$file
	path.suffixize test_file '_test'

	src.run_ "$test_file"
}

src.exe_() {
	local file=${1?${FUNCNAME[0]}: missing argument}; shift

	local -a env
	src.env_ env

	if [[ -x $file ]]; then
		env "${env[@]}" "$file"
	else
		src.interprete "$file" "${env[@]}"
	fi
}

src.interprete() {
	local file=${1?${FUNCNAME[0]}: missing argument}; shift

	local ext=$file
	path.ext ext

	if [[ -z $ext ]]; then
		# shellcheck disable=2209
		ext=sh
		file=$file.$ext
	fi

	[[ -f $file ]] || die "Not file found to interprete: $file"

	local interpreter
	case $ext in
	sh)  interpreter=bash   ;;
	rb)  interpreter=ruby   ;;
	py)  interpreter=python ;;
	pl)  interpreter=perl   ;;
	js)  interpreter=node   ;;
	php) interpreter=php    ;;
	*)   die "Unsupported interpreter for extension: $ext" ;;
	esac

	env "$@" "$interpreter" "$file"
}

src.env_() {
	# shellcheck disable=2034
	local -n src_env_=${1?${FUNCNAME[0]}: missing argument}; shift

	flag.env src_env_
}

src._plan_() {
	local owner repo auth path

	if [[ ! ${_[.host]} =~ ^(github.com|gitlab.com|bitbucket.com)$ ]]; then
		_[.error]='unsupported provider'
		return 1
	fi

	path=${_[.path]:-}

	if [[ ! $path =~ [^/]+/[^/]+ ]]; then
		_[.error]='incomplete url'
		return 1
	fi

	if [[ $path =~ @.*$ ]]; then
		_[.branch]=${path#*@}; path=${path%@*}
		_[.path]=$path
	fi

	owner=${path%%/*}; path=${path#*/}

	_[.dir]=
	if [[ $path = */* ]]; then
		_[.dir]=${path#*/}; path=${path%%/*}
	fi

	repo=${path%.git}

	_[.name]=${_[.host]}/$owner/$repo

	if [[ ${_[.proto]} == https ]] && [[ -n ${HTTPS_TOKEN:-} ]]; then
		auth="${HTTPS_TOKEN}:x-oauth-basic"
	else
		auth=${_[.userinfo]}
	fi

	if [[ -n ${auth:-} ]]; then
		_[1]=${_[.proto]}://$auth@${_[.name]}.git
	else
		_[1]=${_[.proto]}://${_[.name]}.git
	fi

	_[2]=${_[.name]}
}

src.dst_() {
	git.dst_ "$@"
}

src.exist_() {
	git.exist_ "$@"
}

src.get_() {
	git.clone_ "$@"
}

src.update_() {
	git.update_ "$@"
}

src.enter_() {
	git.enter_ "$@"
}

# deb.sh - Debian package management

export DEBIAN_FRONTEND=noninteractive APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn

# deb.install: Install Debian packages
deb.install() {
	# shellcheck disable=2192
	local -A _=(
		[-missings]=false
		[-shiny]=false
	)

	local -a opts=(
		--yes
		--no-install-recommends
	)

	flag.parse "$@"

	local -a args
	flag.args args

	[[ ${#args[@]} -gt 0 ]] || return 0

	local -a packages urls non_urls

	local arg
	for arg in "${args[@]}"; do
		if is.url "$arg"; then
			urls+=("$arg")
		else
			non_urls+=("$arg")
		fi
	done

	if flag.true missings; then
		deb._missings packages "${non_urls[@]}"
	else
		packages=("${non_urls[@]}")
	fi

	if flag.true shiny; then
		local target

		if is.debian stable; then
			target=$(what.debian codename)-backports
		elif is.debian unstable; then
			target=experimental
		fi

		if [[ -n ${target:-} ]]; then
			deb.using "$target"

			opts+=(
				--target-release
				"$target"
			)
		fi
	fi

	deb.update

	[[ "${#packages[@]}" -eq 0 ]] || apt-get install "${opts[@]}" "${packages[@]}"
	[[ "${#urls[@]}" -eq 0     ]] || deb._install_from_urls "${urls[@]}"
}

# deb.uninstall: Uninstall Debian packages
deb.uninstall() {
	local -a packages

	deb._missings packages "$@"
	[[ ${#packages[@]} -gt 0 ]] || return 0

	apt-get purge -y "${packages[@]}"

	must.proceed apt-get autoremove -y && must.proceed apt-get autoclean -y
}

# deb.missings: Print missing packages among given packages
deb.missings() {
	local -a missings
	deb._missings missings "$@"

	for package in "${missings[@]}"; do
		echo "$package"
	done
}

# deb.update: Update Debian package index
deb.update() {
	expired 60 /var/cache/apt/pkgcache.bin || apt-get update -y
}

# deb.repository: Add Debian repository
deb.repository() {
	local name=${1?${FUNCNAME[0]}: missing argument}; shift
	local url=${1:-}

	has.stdin || die 'Required stdin data'

	if [[ -n ${url:-} ]]; then
		deb._apt_key_add "$url" || return 0
	fi

	cat >/etc/apt/sources.list.d/"$name".list
	apt-get update -y
}

# deb.using: Use given official Debian distributions
deb.using() {
	local dist

	for dist; do
		case $dist in
		stable|testing|unstable|sid|experimental)
			;;
		*)
			deb._dist_valid "$dist" || die "Invalid distribution: $dist"
			;;
		esac

		deb._dist_added "$dist" || deb.repository "$dist" <<-EOF
			deb http://ftp.debian.org/debian $dist main contrib non-free
		EOF
	done
}

# deb.sh - Private functions

deb._dist_valid() {
	local dist=${1?${FUNCNAME[0]}: missing argument}; shift

	http.is OK http://ftp.debian.org/debian/dists/"$dist"/
}

deb._dist_added() {
	local dist=${1?${FUNCNAME[0]}: missing argument}; shift

	grep -qE "^deb.*\bdebian.org\b.*\b$dist\b" /etc/apt/*.list /etc/apt/sources.list.d/*.list
}

deb._apt_key_add() {
	local url=${1?${FUNCNAME[0]}: missing argument}; shift

	local tempfile
	temp.file tempfile

	http.get "$url" >"$tempfile" || die "Couldn't get key file: $url"

	local -a questioned_fingerprints installed_fingerprints

	mapfile -t questioned_fingerprints < <(
		gpg -nq --import --import-options import-show --with-colons "$tempfile" | awk -F: '$1 == "fpr" { print $10 }' 2>/dev/null
	)

	# shellcheck disable=2034
	mapfile -t installed_fingerprints < <(
		apt-key adv --list-public-keys --with-fingerprint --with-colon | awk -F: '$1 == "fpr" { print $10 }' 2>/dev/null
	)

	local fingerprint
	for fingerprint in "${questioned_fingerprints[@]}"; do
		included "$fingerprint" "${installed_fingerprints[@]}" || return 1
	done

	apt-key add "$tempfile"

	rm -f -- "$tempfile"
}

deb._missings() {
	local -a deb_missings_=${1?${FUNCNAME[0]}: missing argument}; shift

	local package
	for package in "${[@]}"; do
		# shellcheck disable=2016
		if [ -z "$(dpkg-query -W -f='${Installed-Size}' "$package" 2>/dev/null ||:)" ]; then
			deb_missings_+=("$package")
		fi
	done
}

deb._install_from_urls() {
	local url
	for url; do
		local deb

		file.download "$url" deb

		dpkg-deb --info "$deb" &>/dev/null || die "Not a valid Debian package: $url"
		dpkg -i -- "$deb" 2>/dev/null || true
		apt-get -y install --no-install-recommends --fix-broken

		rm -f -- "$deb"
	done
}

# text.sh - Text blob manipulations

# text.fix: Append stdin content to the target file
text.fix() {
	local file=${1?${FUNCNAME[0]}: missing argument}; shift

	text.unfix "$file"

	{
		echo '# BEGIN FIX'
		cat
		echo '# END FIX'
	} >>"$file"
}

# text.fix: Remove appended content
text.unfix() {
	local file=${1?${FUNCNAME[0]}: missing argument}; shift

	text.fixed "$file" || return 0

	[[ -w $file ]] || die "File not writable: $file"

	sed -i '/BEGIN FIX/,/END FIX/d' "$file"
}

text.fixed() {
	local file=${1?${FUNCNAME[0]}: missing argument}; shift

	[[ -f $file ]] || die "File not found: $file"

	grep -qE '(BEGIN|END) FIX' "$file"
}

# filetype.sh - Filetype detection

# filetype.mime: What mime type
filetype.mime() {
	local -A _=(
		[-zip]=false
	)

	flag.parse "$@"

	local file=${_[1]?${FUNCNAME[0]}: missing value}

	must.f "$file"

	if flag.true zip; then
		file --mime-type --brief --uncompress-noreport "$file"
	else
		file --mime-type --brief "$file"
	fi
}


# is.file: Detect file type
filetype.is() {
	local -A _=(
		[-zip]=false
	)

	flag.parse "$@"

	local -a args; flag.args args

	filetype.is_ "${args[@]}"
}

filetype.is_() {
	local file=${1?${FUNCNAME[0]}: missing argument}; shift
	local type=${1?${FUNCNAME[0]}: missing argument}; shift

	must.f "$file"

	local func=filetype.is._"${type}"_

	must.callable "$func" "Unable to know type: $type"

	"$func" "$file" "$@"
}

filetype.is._mime_() {
	local file=${1?${FUNCNAME[0]}: missing argument};     shift
	local expected=${1?${FUNCNAME[0]}: missing argument}; shift

	local mime
	if flag.true zip; then
		mime=$(file --mime-type --brief --uncompress-noreport "$file")
	else
		mime=$(file --mime-type --brief "$file")
	fi

	_[.file.mime]=$mime

	[[ $mime = "$expected" ]]
}

filetype.is._program_() {
	local mime encoding

	IFS='; ' read -r mime encoding < <(file --mime --brief "$1")

	if [[ $encoding =~ binary$ ]]; then
		if [[ $mime  =~ -executable$ ]]; then
			_[.file.program]=binary
			return 0
		fi
	else
		if head -n 1 "$file" | grep -q '^#!'; then
			_[.file.program]=script
			return 1
		fi
	fi

	return 1
}

filetype.is._compressed_() {
	local mime; mime=$(file --mime-type --brief "$1")

	case $mime in
	gzip|zip|x-xz|x-bzip2|x-zstd)
		local zip=$mime; zip=${zip##*/}; zip=${zip##*-}

		if [[ $(file --mime-type --brief --uncompress-noreport "$file") = tar ]]; then
			_[.file.zip]=tar.$zip
		else
			_[.file.zip]=$zip
		fi

		return 0 ;;
	*)
		return 1 ;;
	esac
}

# unzip: Unpack compressed file
zip.unpack() {
	local in=${1?${FUNCNAME[0]}: missing argument};   shift
	local out=${1?${FUNCNAME[0]}: missing argument};  shift

	must.f "$in"

	local -A _

	file.is_ compressed "$in" || die "Not a compressed file of known type: $in"

	local func=zip._unpack.${_[.file.zip]:-}

	must.callable "$func" "Unsupported compressed file type: $zip"

	"$func" "$in" "$out"
}

zip._unpack.tar.gz() {
	tar --strip-components=1 -zxvf "$1" -C "$2"
}

zip._unpack.tar.bz2() {
	must.available bzip2

	tar --strip-components=1 -jxvf "$1" -C "$2"
}

zip._unpack.tar.xz() {
	must.available xz

	tar --strip-components=1 -Jxvf "$1" -C "$2"
}

zip._unpack.tar.zst() {
	must.available zstd

	tar --strip-components=1 --zstd -xvf "$1" -C "$2"
}

zip._unpack.zip() {
	must.available unzip

	unzip -q -d "$2" "$1"
}

zip._unpack.gz() {
	local tempfile
	temp.file tempfile

	zcat "$1" >"$tempfile" && mv "$tempfile" "$2"
}

zip._unpack.bz2() {
	must.available bzcat

	local tempfile
	temp.file tempfile

	bzcat "$1" >"$tempfile" && mv "$tempfile" "$2"
}

zip._unpack.xz() {
	must.available unxz

	local tempfile
	temp.file tempfile

	unxz "$1" >"$tempfile" && mv "$tempfile" "$2"
}

zip._unpack.zst() {
	must.available zstdcat

	local tempfile
	temp.file tempfile

	zstdcat -f "$1" >"$tempfile" && mv "$tempfile" "$2"
}

declare -Ag help=(
	['say']='Print messages on standard error'
	['cry']='Print warning messages on standard error'
	['die']='Print error messages and exit failure'
	['bug']='Report bug and exit failure'
	['bye']='Print messages and exit successfully'
	['hey']='Print colored messages'
	['self version']='Print self version'
	['self name']='Print self name'
	['self path']='Print self path'
	['temp inside']='Execute command in temp dir'
	['os virtual']='Which virtualization'
	['os distribution']='Which distribution'
	['os codename']='Which distribution release'
	['os is']='Detect OS feature'
	['http get']='Get URL'
	['file install']='Install file from URL'
	['bin install']='Install program to path'
	['bin use']='Use program'
	['src install']='Install to a known location'
	['src use']='Install src into the runtime tree'
	['enter']='Get src from URL and enter to the directory'
	['run']='Run src from URL'
	['deb install']='Install Debian packages'
	['deb uninstall']='Uninstall Debian packages'
	['deb missings']='Print missing packages among given packages'
	['deb update']='Update Debian package index'
	['deb repository']='Add Debian repository'
	['deb using']='Use given official Debian distributions'
	['text fix']='Append stdin content to the target file'
	['text fix']='Remove appended content'
	['filetype mime']='What mime type'
	['is file']='Detect file type'
	['unzip']='Unpack compressed file'
)

.usage() {
	local cmd

	say "Usage:    $0 commands ..."
	say "Commands:"

	# shellcheck disable=2154
	for cmd in "${!help[@]}"; do
		printf "\\t%-24s  %s\n" "$cmd" "${help[$cmd]}"
	done | sort >&2
}

.help() {
	if [[ $# -eq 0 ]]; then
		.usage
		die 'Help topic required.'
	fi

	local subject=${help["${*}"]:-}

	[[ -n ${subject:-} ]] || die "E: No help found: ${*}."
	bye "$subject"
}

declare -Ag command=(
	['say']='say'
	['cry']='cry'
	['die']='die'
	['bug']='bug'
	['bye']='bye'
	['hey']='hey'
	['self version']='self.version'
	['self name']='self.name'
	['self path']='self.path'
	['temp inside']='temp.inside'
	['os virtual']='os.virtual'
	['os distribution']='os.distribution'
	['os codename']='os.codename'
	['os is']='os.is'
	['http get']='http.get'
	['file install']='file.install'
	['bin install']='bin.install'
	['bin use']='bin.use'
	['src install']='src.install'
	['src use']='src.use'
	['enter']='src.enter'
	['run']='src.run'
	['deb install']='deb.install'
	['deb uninstall']='deb.uninstall'
	['deb missings']='deb.missings'
	['deb update']='deb.update'
	['deb repository']='deb.repository'
	['deb using']='deb.using'
	['text fix']='text.fix'
	['text fix']='text.unfix'
	['filetype mime']='filetype.mime'
	['is file']='filetype.is'
	['unzip']='zip.unpack'
)

.dispatch() {
	local -a args=("$@")

	if [[ $# -eq 0 ]]; then
		.usage
		die 'Command required.'
	fi

	if [[ $1 = help ]]; then
		shift

		.help "$@"
		exit
	fi

	local -a try
	while [[ $# -gt 0 ]]; do
		try+=("$1")
		shift

		local key="${try[*]}"

		local func
		func=${command["$key"]:-}

		if [[ -n $func ]]; then
			"$func" "$@"
			return $?
		fi
	done

	die "No command found: ${args[*]}."
}

.source() {
	echo "UNDERSCORE=$(self.path)"
	echo
	cat <<'EOF'
.() {
	# prelude.sh - Standard prelude

	[ -n "${BASH_VERSION:-}"        ] || { echo >&2 'Bash required.';                         exit 1; }
	[[ ${BASH_VERSINFO[0]:-} -ge 4 ]] || { echo >&2 'Bash version 4 or higher required.';     exit 1; }
	[[ -x /usr/bin/apt-get         ]] || { echo >&2 'Only Debian and derivatives supported.'; exit 1; }

	set -Eeuo pipefail; shopt -s nullglob; [[ -z ${TRACE:-} ]] || set -x; unset CDPATH; IFS=$' \t\n'

	export LC_ALL=C.UTF-8 LANG=C.UTF-8

	declare -grx UNDERSCORE=$UNDERSCORE

	case ${1:-} in
	-root)
		[[ ${EUID:-} -eq 0 ]] || { echo >&2 'Root privileges required.'; exit 1; }
		shift
		;;
	esac

	_.die() {
		"$UNDERSCORE" die "$@"; exit $?
	}

	_.bye() {
		"$UNDERSCORE" bye "$@"; exit $?
	}

	_.bug() {
		"$UNDERSCORE" bug "$@"; exit $?
	}

	_.enter() {
		local dir

		if dir=$("$UNDERSCORE" enter "$@") && [[ -n $dir ]]; then
			pushd "$dir" &>/dev/null || exit
		fi
	}

	_.leave() {
		popd &>/dev/null || exit
	}

	unset -f "${FUNCNAME[0]}"
}

_() {
	local cmd=$1

	case $cmd in
	die|bye|bug|enter|leave) shift; _."$cmd" "$@" ;;
	*)                       "$UNDERSCORE" "$@"   ;;
	esac
}

. "$@"
EOF
}

.sourced() {
	if [[ $# -gt 0 ]]; then
		[[ $1 = . ]] && return 0 # source explicitly specified
	else
		[[ -t 1   ]] || return 0 # backticked or piped without args
	fi

	return 1
}

.init() {
	trap.setup
}

main() {
	if .sourced "$@"; then
		.source "$@"
	else
		.init
		.dispatch "$@"
	fi
}

[[ "${BASH_SOURCE[0]}" != "$0" ]] || main "$@"
