#!/usr/bin/env ruby
# frozen_string_literal: true

# Compile shell files, that is, include (selected) code snippets and do substitutions via simple directives.
# Note that, this is not a full-fledged implementation (i.e. no nested inclusions).
#
# See src/she for an example.

module Fmt
  DEFAULT_FMT_OPTIONS = {
    space: "\t", indent: 0, prefix: nil, suffix: nil
  }.freeze

  refine String do
    def fmt(**options)
      options = DEFAULT_FMT_OPTIONS.merge options

      out = dup
      out.gsub!(/^/m, options[:space] * options[:indent]) if options[:indent].positive?
      out.gsub!(/^/m, options[:prefix]) if options[:prefix]
      out.gsub!(/$/m, options[:suffix]) if options[:suffix]
      out
    end
  end

  refine Array do
    def fmt(**options)
      map { |line| line.fmt(**options) }
    end

    def fmt!(**options)
      map! { |line| line.fmt(**options) }
    end
  end
end

class Source
  attr_reader :path, :blocks, :rawlines

  def initialize(path)
    @path     = path
    @blocks   = Block.parse((@rawlines = File.readlines(path).map(&:chomp)).each)
  end

  class Block
    using Fmt

    attr_reader :lines, :type, :fun, :sig, :label
    attr_writer :doc

    def initialize(lines, type)
      parser = "parse_#{@type = type}"
      @lines = respond_to?(parser) ? send(parser, lines) : lines
    end

    def doc
      type == :doc ? lines.join("\n").strip : @doc
    end

    def public
      sig
    end

    def documented_lines
      return doc if type == :doc

      [*doc, *lines]
    end

    def outlines(documented: true, **options)
      (documented ? documented_lines : lines).fmt(**options)
    end

    def convey_doc_block(other)
      self.doc, self.label, self.sig = other.doc, other.label, other.sig
    end

    private

    attr_writer :fun, :sig, :label

    BLOCK_PATTERN = {
      fun: /
        ^
        (?<fun>[^(]+)
        [(]
      /x,

      doc: /
        ^
        (?<pre>
          [#]
          \s+
        )
        (?:
          (?<sig>[\w.:-]+)
          (
            :\s*
            |
            \s+[-]{1,}\s+
          )
        )?
        (?<label>.*)
      /x
    }.freeze

    def parse_fun(lines)
      if (m = lines.first.match(BLOCK_PATTERN[:fun]))
        self.fun = m[:fun] if m
      end

      lines
    end

    def parse_doc(lines)
      if (m = lines.first.match(BLOCK_PATTERN[:doc]))
        self.sig   = m[:sig]
        self.label = m[:label]
      end

      sig ? [m[:pre] + label, *lines[1..-1]] : lines
    end

    class << self
      def parse(reader)
        blocks = []

        loop do
          blocks << case reader.peek
                    when /^#/     then new(read(reader, /^([^#]|$)/),               :doc)
                    when /\{\s*$/ then new(read(reader, /\}\s*$/, inclusive: true), :fun)
                    when /^\s*$/  then new(read(reader, /\S/),                      :blank)
                    else               new([reader.next],                           :nonfun)
                    end
        end

        normalize blocks
      end

      private

      def read(reader, end_pattern, inclusive: false)
        lines = [reader.next]

        loop do
          break if reader.peek.match? end_pattern

          lines << reader.next
        end
        lines << reader.next if inclusive

        lines
      end

      def normalize(blocks) # rubocop:disable Metrics/MethodLength
        result = []

        it = blocks.each
        loop do
          next if (current = it.next).type == :blank

          if current.type == :doc && (trailing = it.peek).type != :doc && trailing.type != :blank
            trailing.convey_doc_block(current)
            next
          end

          result << current
        end

        result
      end
    end
  end
end

class Compiler
  using Fmt

  Error = Class.new StandardError

  attr_reader :inlines, :sources, :exports

  def initialize(inlines, substitutions: nil)
    @inlines       = inlines.map(&:chomp)
    @substitutions = substitutions || {}
    @sources       = {}
  end

  def compile
    first_pass = []
    inlines.each { |line| first_pass += process(line, :include) }

    self.exports = export

    second_pass = []
    first_pass.each { |line| second_pass += process(line, :substitute) }

    second_pass.join "\n"
  end

  def export # rubocop:disable Metrics/MethodLength, Metrics/AbcSize
    symbols = []

    sources.values.map(&:blocks).each do |blocks|
      blocks.each do |block|
        next unless block.type == :fun
        next unless block.public
        next if !block.doc || block.doc.empty?

        command, fun, label = block.public.split('.').join(' '), block.fun, block.label

        next if fun.match?(/(_$|\b_)/)

        symbols << { command: command, fun: fun, label: label }
      end
    end

    symbols
  end

  private

  attr_reader :substitutions
  attr_writer :exports

  # rubocop:disable Layout/AlignHash
  DIRECTIVE = {
    include: /
      ^
      (?<lead>\s*)
      \#:
      (?<arg>.*)
    /x,

    substitute: %r{
      ^
      (?<lead>\s*)
      \#/
      (?<substitution>\w+)
      /
      (?<arg>.*)
    }x
  }.freeze
  # rubocop:enable Layout/AlignHash

  def process(line, directive)
    return [line] unless (m = line.match(DIRECTIVE[directive]))

    send("do_#{directive}", m).fmt! prefix: m[:lead]
  end

  def do_include(match)
    return src(match[:arg]).rawlines unless (field = parse_include(match[:arg]))

    query_blocks_for(src(field[:path]).blocks, field[:key], by: field[:by]).tap do |result|
      raise Error, "No match for line: #{match}" if result.empty?
    end
  end

  def parse_include(arg)
    case (fields = arg.split ':').size
    when 1 then nil
    when 2 then { path: fields[0], by: fields[1], key: :label    }
    when 3 then { path: fields[0], by: fields[1], key: fields[2] }
    else        raise Error, "Malformed include directive: #{arg}"
    end
  end

  def do_substitute(match)
    unless (substituter = substitutions[substitution = match[:substitution]])
      warn "No substituter found for: #{substitution}"
      return [line]
    end

    [*substituter.call(self, match[:arg])]
  end

  def query_blocks_for(blocks, *strings, **args)
    result = []

    by = :label if !(by = args[:by]) || by.empty?

    strings.each do |string|
      founds = blocks.select do |block|
        next unless (attribute = block.send(by))

        attribute.casecmp(string.squeeze(' ')).zero?
      end
      founds.each { |found| result += found.outlines(**args) }
    end

    result
  end

  def src(path)
    unless sources.key?(path)
      raise Error, "File not found: #{path}" unless File.exist?(path)

      sources[path] = Source.new path
    end

    sources[path]
  end

  class << self
    def compile(*args, **options)
      new(*args, **options).compile
    end
  end
end

module Main
  using Fmt

  private_class_method def self.bash_array_lines(exports, variable, key)
    [
      "declare -Ag #{variable}=(",
      *exports.map { |h| "['#{h[:command]}']='#{h[key]}'" }.fmt(indent: 1),
      ')'
    ]
  end

  SUBSTITUTIONS = {
    'command' => proc { |compiler| bash_array_lines(compiler.exports, 'command', :fun)   },
    'help'    => proc { |compiler| bash_array_lines(compiler.exports, 'help',    :label) }
  }.freeze

  def self.call
    puts Compiler.compile ARGF.readlines, substitutions: SUBSTITUTIONS
  rescue Compiler::Error => e
    abort 'E: ' + e.message
  end
end

Main.()
